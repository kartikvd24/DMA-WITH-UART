
8_UART_RX_DRIVER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f0  080004f0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f0  080004f0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004f0  080004f0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004f0  080004f0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f4  080004f4  000014f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004f8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004fc  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004fc  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016cc  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000677  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00003d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016a  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147b4  00000000  00000000  000040ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c27  00000000  00000000  0001889e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a5a  00000000  00000000  0001b4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cf1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  0009cf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0009d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d8 	.word	0x080004d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004d8 	.word	0x080004d8

080001d4 <main>:
#define GPIOA_5 (1U<<5)

#define LED_PIN GPIOA_5

char key;
int main(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=GPIOAEN;
 80001d8:	4b15      	ldr	r3, [pc, #84]	@ (8000230 <main+0x5c>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <main+0x5c>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER|=(1U<<10);
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <main+0x60>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	@ (8000234 <main+0x60>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<11);
 80001f0:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <main+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <main+0x60>)
 80001f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fa:	6013      	str	r3, [r2, #0]

	UART2_RXTX_INIT();
 80001fc:	f000 f886 	bl	800030c <UART2_RXTX_INIT>

	while(1){
		key=uart2_read();
 8000200:	f000 f8f4 	bl	80003ec <uart2_read>
 8000204:	4603      	mov	r3, r0
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <main+0x64>)
 800020a:	701a      	strb	r2, [r3, #0]
		if(key=='1'){
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <main+0x64>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b31      	cmp	r3, #49	@ 0x31
 8000212:	d106      	bne.n	8000222 <main+0x4e>
			GPIOA->ODR |=LED_PIN;
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <main+0x60>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a06      	ldr	r2, [pc, #24]	@ (8000234 <main+0x60>)
 800021a:	f043 0320 	orr.w	r3, r3, #32
 800021e:	6153      	str	r3, [r2, #20]
 8000220:	e7ee      	b.n	8000200 <main+0x2c>
		}
		else{
			GPIOA->ODR &=~LED_PIN;
 8000222:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <main+0x60>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <main+0x60>)
 8000228:	f023 0320 	bic.w	r3, r3, #32
 800022c:	6153      	str	r3, [r2, #20]
	while(1){
 800022e:	e7e7      	b.n	8000200 <main+0x2c>
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	20000020 	.word	0x20000020

0800023c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <NMI_Handler+0x4>

08000244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <HardFault_Handler+0x4>

0800024c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <MemManage_Handler+0x4>

08000254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000258:	bf00      	nop
 800025a:	e7fd      	b.n	8000258 <BusFault_Handler+0x4>

0800025c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <UsageFault_Handler+0x4>

08000264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000292:	f000 f8e9 	bl	8000468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <SystemInit+0x20>)
 80002a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002a6:	4a05      	ldr	r2, [pc, #20]	@ (80002bc <SystemInit+0x20>)
 80002a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <uart_set_baudrate>:
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
int __io_putchar(int ch);



static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 80002cc:	6879      	ldr	r1, [r7, #4]
 80002ce:	68b8      	ldr	r0, [r7, #8]
 80002d0:	f000 f808 	bl	80002e4 <compute_uart_div>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	085a      	lsrs	r2, r3, #1
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	441a      	add	r2, r3
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002fc:	b29b      	uxth	r3, r3

}
 80002fe:	4618      	mov	r0, r3
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
	...

0800030c <UART2_RXTX_INIT>:




void UART2_RXTX_INIT(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000310:	4b32      	ldr	r3, [pc, #200]	@ (80003dc <UART2_RXTX_INIT+0xd0>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a31      	ldr	r2, [pc, #196]	@ (80003dc <UART2_RXTX_INIT+0xd0>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 800031c:	4b30      	ldr	r3, [pc, #192]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a2f      	ldr	r2, [pc, #188]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a2c      	ldr	r2, [pc, #176]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800032e:	f023 0310 	bic.w	r3, r3, #16
 8000332:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 8000334:	4b2a      	ldr	r3, [pc, #168]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a29      	ldr	r2, [pc, #164]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800033a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 8000340:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a26      	ldr	r2, [pc, #152]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 800034c:	4b24      	ldr	r3, [pc, #144]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a23      	ldr	r2, [pc, #140]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a20      	ldr	r2, [pc, #128]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800035e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000362:	6213      	str	r3, [r2, #32]

   //set pa3 to alternate function mode as it is rx value
	GPIOA->MODER|=(1U<<7);
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1d      	ldr	r2, [pc, #116]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800036e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<6);
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1a      	ldr	r2, [pc, #104]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800037a:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0]|=(1U<<12);//for afrl low arf[0] and for afr high arf[1]
 800037c:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a17      	ldr	r2, [pc, #92]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000382:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000386:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<13);
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800038e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000392:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<14);
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 800039a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800039e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <UART2_RXTX_INIT+0xd4>)
 80003a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003aa:	6213      	str	r3, [r2, #32]


	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <UART2_RXTX_INIT+0xd0>)
 80003ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b0:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <UART2_RXTX_INIT+0xd0>)
 80003b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b6:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 80003b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003bc:	4909      	ldr	r1, [pc, #36]	@ (80003e4 <UART2_RXTX_INIT+0xd8>)
 80003be:	480a      	ldr	r0, [pc, #40]	@ (80003e8 <UART2_RXTX_INIT+0xdc>)
 80003c0:	f7ff ff7e 	bl	80002c0 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE|CR1_RX;
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <UART2_RXTX_INIT+0xdc>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	60da      	str	r2, [r3, #12]

	USART2->CR1|=(1U<<13);
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <UART2_RXTX_INIT+0xdc>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a06      	ldr	r2, [pc, #24]	@ (80003e8 <UART2_RXTX_INIT+0xdc>)
 80003d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003d4:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020000 	.word	0x40020000
 80003e4:	00f42400 	.word	0x00f42400
 80003e8:	40004400 	.word	0x40004400

080003ec <uart2_read>:

char uart2_read(void){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	/*recive flag should not be o*/
	while(!(USART2->SR & SR_RXE)){}
 80003f0:	bf00      	nop
 80003f2:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <uart2_read+0x24>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 0320 	and.w	r3, r3, #32
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0f9      	beq.n	80003f2 <uart2_read+0x6>

	//return the data
	return USART2->DR;
 80003fe:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <uart2_read+0x24>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40004400 	.word	0x40004400

08000414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800044c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000418:	f7ff ff40 	bl	800029c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000442:	f000 f825 	bl	8000490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000446:	f7ff fec5 	bl	80001d4 <main>
  bx  lr    
 800044a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800044c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000458:	080004f8 	.word	0x080004f8
  ldr r2, =_sbss
 800045c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000460:	20000028 	.word	0x20000028

08000464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <HAL_IncTick+0x20>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <HAL_IncTick+0x24>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_IncTick+0x24>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	20000000 	.word	0x20000000
 800048c:	20000024 	.word	0x20000024

08000490 <__libc_init_array>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	4d0d      	ldr	r5, [pc, #52]	@ (80004c8 <__libc_init_array+0x38>)
 8000494:	4c0d      	ldr	r4, [pc, #52]	@ (80004cc <__libc_init_array+0x3c>)
 8000496:	1b64      	subs	r4, r4, r5
 8000498:	10a4      	asrs	r4, r4, #2
 800049a:	2600      	movs	r6, #0
 800049c:	42a6      	cmp	r6, r4
 800049e:	d109      	bne.n	80004b4 <__libc_init_array+0x24>
 80004a0:	4d0b      	ldr	r5, [pc, #44]	@ (80004d0 <__libc_init_array+0x40>)
 80004a2:	4c0c      	ldr	r4, [pc, #48]	@ (80004d4 <__libc_init_array+0x44>)
 80004a4:	f000 f818 	bl	80004d8 <_init>
 80004a8:	1b64      	subs	r4, r4, r5
 80004aa:	10a4      	asrs	r4, r4, #2
 80004ac:	2600      	movs	r6, #0
 80004ae:	42a6      	cmp	r6, r4
 80004b0:	d105      	bne.n	80004be <__libc_init_array+0x2e>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b8:	4798      	blx	r3
 80004ba:	3601      	adds	r6, #1
 80004bc:	e7ee      	b.n	800049c <__libc_init_array+0xc>
 80004be:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c2:	4798      	blx	r3
 80004c4:	3601      	adds	r6, #1
 80004c6:	e7f2      	b.n	80004ae <__libc_init_array+0x1e>
 80004c8:	080004f0 	.word	0x080004f0
 80004cc:	080004f0 	.word	0x080004f0
 80004d0:	080004f0 	.word	0x080004f0
 80004d4:	080004f4 	.word	0x080004f4

080004d8 <_init>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr

080004e4 <_fini>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr
