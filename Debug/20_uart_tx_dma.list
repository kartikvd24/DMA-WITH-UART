
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000498  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800062c  0800062c  0000162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800064c  0800064c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800064c  0800064c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800064c  0800064c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800064c  0800064c  0000164c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000650  08000650  00001650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000654  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000658  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000658  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bf3  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a1  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  000043c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018a  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001481a  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dc4  00000000  00000000  00018f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081bd1  00000000  00000000  0001bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b8  00000000  00000000  0009d974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0009e02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000614 	.word	0x08000614

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000614 	.word	0x08000614

080001d4 <main>:
#define GPIOA_5 (1U<<5)
#define LED_PIN GPIOA_5
#define SR_RXNE (1U<<5)
static void uart_callback(void);
char key;
int main(){
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
	char message [32]="HEllo from Stm32 DMA interface\n\r";
 80001da:	4b12      	ldr	r3, [pc, #72]	@ (8000224 <main+0x50>)
 80001dc:	463c      	mov	r4, r7
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RCC->AHB1ENR|=GPIOAEN;
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <main+0x54>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <main+0x54>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER|=(1U<<10);
 80001f8:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <main+0x58>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <main+0x58>)
 80001fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<11);
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <main+0x58>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a08      	ldr	r2, [pc, #32]	@ (800022c <main+0x58>)
 800020a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800020e:	6013      	str	r3, [r2, #0]

	UART2_RXTX_INIT();
 8000210:	f000 f92e 	bl	8000470 <UART2_RXTX_INIT>
	dma1_stream6_init((uint32_t) message, (uint32_t) &USART2->DR, 32);
 8000214:	463b      	mov	r3, r7
 8000216:	2220      	movs	r2, #32
 8000218:	4905      	ldr	r1, [pc, #20]	@ (8000230 <main+0x5c>)
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f8b4 	bl	8000388 <dma1_stream6_init>

	while(1){
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x4c>
 8000224:	0800062c 	.word	0x0800062c
 8000228:	40023800 	.word	0x40023800
 800022c:	40020000 	.word	0x40020000
 8000230:	40004404 	.word	0x40004404

08000234 <uart_callback>:

}
}

static void uart_callback(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
GPIOA->ODR |=LED_PIN;
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <uart_callback+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <uart_callback+0x1c>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]

		}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//check for transfer complete
	if(DMA1->HISR & TCIF6)
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <DMA1_Stream6_IRQHandler+0x24>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d007      	beq.n	8000274 <DMA1_Stream6_IRQHandler+0x20>
	{
		DMA1->HIFCR|=HIFCR_CTCIF6;
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <DMA1_Stream6_IRQHandler+0x24>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a03      	ldr	r2, [pc, #12]	@ (8000278 <DMA1_Stream6_IRQHandler+0x24>)
 800026a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800026e:	60d3      	str	r3, [r2, #12]
		uart_callback();
 8000270:	f7ff ffe0 	bl	8000234 <uart_callback>
	}
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40026000 	.word	0x40026000

0800027c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000280:	bf00      	nop
 8000282:	e7fd      	b.n	8000280 <NMI_Handler+0x4>

08000284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <HardFault_Handler+0x4>

0800028c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <MemManage_Handler+0x4>

08000294 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <BusFault_Handler+0x4>

0800029c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <UsageFault_Handler+0x4>

080002a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d2:	f000 f967 	bl	80005a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <SystemInit+0x20>)
 80002e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e6:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <SystemInit+0x20>)
 80002e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	@ (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <uart_set_baudrate>:
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
int __io_putchar(int ch);



static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	68b8      	ldr	r0, [r7, #8]
 800034c:	f000 f808 	bl	8000360 <compute_uart_div>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	609a      	str	r2, [r3, #8]
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	085a      	lsrs	r2, r3, #1
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	441a      	add	r2, r3
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	fbb2 f3f3 	udiv	r3, r2, r3
 8000378:	b29b      	uxth	r3, r3

}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <dma1_stream6_init>:

void dma1_stream6_init(uint32_t src, uint32_t dst, uint32_t len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	//enable clock acces  for dma
	RCC->AHB1ENR|=RCC_DMA1;
 8000394:	4b32      	ldr	r3, [pc, #200]	@ (8000460 <dma1_stream6_init+0xd8>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a31      	ldr	r2, [pc, #196]	@ (8000460 <dma1_stream6_init+0xd8>)
 800039a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
	//disable dma stream6
	DMA1_Stream6->CR &=~DMA_DIRECT_MODE;
 80003a0:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <dma1_stream6_init+0xdc>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000464 <dma1_stream6_init+0xdc>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
	//wait untill the dma 6 is disabled
	while(DMA1_Stream6->CR &DMA_DIRECT_MODE){}
 80003ac:	bf00      	nop
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <dma1_stream6_init+0xdc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1f9      	bne.n	80003ae <dma1_stream6_init+0x26>
	//clear all the interrupt flags of stream
	DMA1->HIFCR|=(1U<<16);
 80003ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a2a      	ldr	r2, [pc, #168]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003c4:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR|=(1U<<18);
 80003c6:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a27      	ldr	r2, [pc, #156]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003d0:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR|=(1U<<19);
 80003d2:	4b25      	ldr	r3, [pc, #148]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	4a24      	ldr	r2, [pc, #144]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003dc:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR|=(1U<<20);
 80003de:	4b22      	ldr	r3, [pc, #136]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4a21      	ldr	r2, [pc, #132]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003e8:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR|=(1U<<21);
 80003ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000468 <dma1_stream6_init+0xe0>)
 80003f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003f4:	60d3      	str	r3, [r2, #12]


	//set destination buffer
	DMA1_Stream6->PAR=dst;
 80003f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000464 <dma1_stream6_init+0xdc>)
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	6093      	str	r3, [r2, #8]
	//set the source buffer
	DMA1_Stream6->M0AR=src;
 80003fc:	4a19      	ldr	r2, [pc, #100]	@ (8000464 <dma1_stream6_init+0xdc>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	60d3      	str	r3, [r2, #12]
	//set the stream length
	DMA1_Stream6->NDTR=len;
 8000402:	4a18      	ldr	r2, [pc, #96]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6053      	str	r3, [r2, #4]
	//select stream 6 ch4
	DMA1_Stream6->CR =CH4SEL;
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <dma1_stream6_init+0xdc>)
 800040a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800040e:	601a      	str	r2, [r3, #0]
	//enable memory increment
	DMA1_Stream6->CR|=MEMINC;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800041a:	6013      	str	r3, [r2, #0]
	//configure the transfer direction
	DMA1_Stream6->CR|=DMA_DIR;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <dma1_stream6_init+0xdc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a10      	ldr	r2, [pc, #64]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000426:	6013      	str	r3, [r2, #0]
	//enable dma transfer complete interrupt
	DMA1_Stream6->CR|=DMA_TCIE;
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <dma1_stream6_init+0xdc>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <dma1_stream6_init+0xdc>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6013      	str	r3, [r2, #0]
	//enable direct mode an disable fifo
	DMA1_Stream6->FCR=0;
 8000434:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]

	//enable dma1_stream 6
	DMA1_Stream6->CR |=DMA_DIRECT_MODE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <dma1_stream6_init+0xdc>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a09      	ldr	r2, [pc, #36]	@ (8000464 <dma1_stream6_init+0xdc>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]

	//enable art2 transmitter DMA
	USART2->CR3|=USART_CR3_DMAT;
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <dma1_stream6_init+0xe4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a08      	ldr	r2, [pc, #32]	@ (800046c <dma1_stream6_init+0xe4>)
 800044c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000450:	6153      	str	r3, [r2, #20]
	//DMA Interrrupt enable in nvic
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000452:	2011      	movs	r0, #17
 8000454:	f7ff ff54 	bl	8000300 <__NVIC_EnableIRQ>
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40023800 	.word	0x40023800
 8000464:	400260a0 	.word	0x400260a0
 8000468:	40026000 	.word	0x40026000
 800046c:	40004400 	.word	0x40004400

08000470 <UART2_RXTX_INIT>:
	//enable UART2 Interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
	USART2->CR1|=(1U<<13);
	//enable uart module
}
void UART2_RXTX_INIT(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000474:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <UART2_RXTX_INIT+0xd0>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000478:	4a31      	ldr	r2, [pc, #196]	@ (8000540 <UART2_RXTX_INIT+0xd0>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 8000480:	4b30      	ldr	r3, [pc, #192]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a2f      	ldr	r2, [pc, #188]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 800048c:	4b2d      	ldr	r3, [pc, #180]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a2c      	ldr	r2, [pc, #176]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 8000498:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 800049a:	6a1b      	ldr	r3, [r3, #32]
 800049c:	4a29      	ldr	r2, [pc, #164]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 800049e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 80004a4:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4a26      	ldr	r2, [pc, #152]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 80004b0:	4b24      	ldr	r3, [pc, #144]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a23      	ldr	r2, [pc, #140]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a20      	ldr	r2, [pc, #128]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004c6:	6213      	str	r3, [r2, #32]

   //set pa3 to alternate function mode as it is rx value
	GPIOA->MODER|=(1U<<7);
 80004c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<6);
 80004d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004de:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0]|=(1U<<12);//for afrl low arf[0] and for afr high arf[1]
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<13);
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004ee:	6a1b      	ldr	r3, [r3, #32]
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<14);
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000502:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15);
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <UART2_RXTX_INIT+0xd4>)
 800050a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800050e:	6213      	str	r3, [r2, #32]


	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <UART2_RXTX_INIT+0xd0>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <UART2_RXTX_INIT+0xd0>)
 8000516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	4909      	ldr	r1, [pc, #36]	@ (8000548 <UART2_RXTX_INIT+0xd8>)
 8000522:	480a      	ldr	r0, [pc, #40]	@ (800054c <UART2_RXTX_INIT+0xdc>)
 8000524:	f7ff ff0a 	bl	800033c <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE|CR1_RX;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <UART2_RXTX_INIT+0xdc>)
 800052a:	220c      	movs	r2, #12
 800052c:	60da      	str	r2, [r3, #12]

	USART2->CR1|=(1U<<13);
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <UART2_RXTX_INIT+0xdc>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	4a06      	ldr	r2, [pc, #24]	@ (800054c <UART2_RXTX_INIT+0xdc>)
 8000534:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000538:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800
 8000544:	40020000 	.word	0x40020000
 8000548:	00f42400 	.word	0x00f42400
 800054c:	40004400 	.word	0x40004400

08000550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000554:	f7ff fec2 	bl	80002dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	@ (8000590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	@ (800059c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800057e:	f000 f825 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000582:	f7ff fe27 	bl	80001d4 <main>
  bx  lr    
 8000586:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000588:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000594:	08000654 	.word	0x08000654
  ldr r2, =_sbss
 8000598:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800059c:	20000024 	.word	0x20000024

080005a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_IncTick+0x20>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <HAL_IncTick+0x24>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <HAL_IncTick+0x24>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000020 	.word	0x20000020

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000604 <__libc_init_array+0x38>)
 80005d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000608 <__libc_init_array+0x3c>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	2600      	movs	r6, #0
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	4d0b      	ldr	r5, [pc, #44]	@ (800060c <__libc_init_array+0x40>)
 80005de:	4c0c      	ldr	r4, [pc, #48]	@ (8000610 <__libc_init_array+0x44>)
 80005e0:	f000 f818 	bl	8000614 <_init>
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	2600      	movs	r6, #0
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f4:	4798      	blx	r3
 80005f6:	3601      	adds	r6, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fe:	4798      	blx	r3
 8000600:	3601      	adds	r6, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	0800064c 	.word	0x0800064c
 8000608:	0800064c 	.word	0x0800064c
 800060c:	0800064c 	.word	0x0800064c
 8000610:	08000650 	.word	0x08000650

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
